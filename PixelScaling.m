%% Scaling from pre-images
function [Zoom2mm, Full_Im, Zoomed_Im] = PixelScaling
%% Starting to find the edges from a zoomed out image
StartingFolder= cd;
[file,path] = uigetfile('*.tif', 'Select Image showing grip edges');
if isequal(file,0)
   disp('User selected Cancel');
else
   disp(['User selected ', fullfile(path,file)]);
   cd(path)
   Full_Im = importfile(file);
end
% Clear temporary variables
clear path file 
cd(StartingFolder) %return

dummy.Im = double(Full_Im);
%dummy.GradIm = grad2D(dummy.Im(:,:,1),1,1);

dummy.pad = 100; % pad front and back to help to find edges near the edge
dummy.padded = [repmat(dummy.Im(:,1,1),1,dummy.pad),dummy.Im(:,:,1),repmat(dummy.Im(:,end,1),1,dummy.pad)];
dummy.window = 20; % looking for differences between pixels this far apart. Pick this value to be bigger than the number of pixels within an edge. 
dummy.horz = 1:size(dummy.Im,1); % which row of the image are we looking at 
dummy.inx = zeros(2,size(dummy.Im,1));
dummy.half = round(size(dummy.Im,2)/2)+dummy.pad;

dummy.FirstPass = (dummy.padded(dummy.horz,1:end-dummy.window)-dummy.padded(dummy.horz,1+dummy.window:end)).^2;
for i = dummy.horz %Matlab doesn't like to use structures as the name of the looping variable so changed to be i 
    [~, dummy.inx(1,i)] = max(dummy.FirstPass(i,1:dummy.half)); 
    [~, dummy.inx(2,i)] = max(dummy.FirstPass(i,dummy.half:end)); 
end

dummy.inx = dummy.inx - dummy.pad;
dummy.inx(2,:) = dummy.inx(2,:)+dummy.half; 

%% Consider the extracted values as two populations in a dataset
for j = 1:2
    [dummy.pdf,dummy.xi] = ksdensity(dummy.inx(j,:),[-dummy.pad:dummy.half]); %Kernel smoothing function estimate for univariate and bivariate data
    
    [~,i] = max(dummy.pdf(1:round(end/2)));
    if j==1
        dummy.grip_edge(j,1) = i -dummy.pad; 
    elseif j==2
        dummy.sample_edge(j,1) = i +dummy.half;
    end
    [~,i] = max(dummy.pdf(round(end/2):end));
    if j==1
        dummy.sample_edge(j,1) = i-dummy.pad+round(length(dummy.pdf)/2); 
    elseif j==2
        dummy.grip_edge(j,1) = i+dummy.half++round(length(dummy.pdf)/2);
    end
end

sample_width = diff(dummy.sample_edge); 
grip_width = diff(dummy.grip_edge);
Pix2mm = grip_width./30; % assumed that grip is 30 mm across this gives the number of pix in 1 mm

%% Redo for the zoomed in image to get a scaling 

StartingFolder= cd;
[file,path] = uigetfile('*.tif', 'Select Image at test Zoom');
if isequal(file,0)
   disp('User selected Cancel');
else
   disp(['User selected ', fullfile(path,file)]);
   cd(path)
   Zoomed_Im = importfile(file);
end
clear file path

dummy.Im = double(Zoomed_Im);
dummy.pad = 100; % pad front and back to help to find edges near the edge
dummy.padded = [repmat(dummy.Im(:,1,1),1,dummy.pad),dummy.Im(:,:,1),repmat(dummy.Im(:,end,1),1,dummy.pad)];
dummy.window = 20; % looking for differences between pixels this far apart. Pick this value to be bigger than the number of pixels within an edge. 
dummy.horz = 1:size(dummy.Im,1); % which row of the image are we looking at 
dummy.inx = zeros(2,size(dummy.Im,1));
dummy.half = round(size(dummy.Im,2)/2)+dummy.pad;
tic
dummy.FirstPass = (dummy.padded(dummy.horz,1:end-dummy.window)-dummy.padded(dummy.horz,1+dummy.window:end)).^2;
for i = dummy.horz %Matlab doesn't like to use structures as the name of the looping variable so changed to be i 
    [~, dummy.inx(1,i)] = max(dummy.FirstPass(i,1:dummy.half)); 
    [~, dummy.inx(2,i)] = max(dummy.FirstPass(i,dummy.half:end)); 
end
toc
dummy.inx = dummy.inx - dummy.pad;
dummy.inx(2,:) = dummy.inx(2,:)+dummy.half; 

%% Use z-score to remove outliers and calculate the width to give scale
dummy.std = std(dummy.inx')';
dummy.mean = mean(dummy.inx')';
dummy.median = median(dummy.inx')';
dummy.z = (dummy.inx-dummy.median)./dummy.std;
dummy.NotOutlier = find(sum(abs(dummy.z))<1);
Zoom_width(1) = median(diff(dummy.inx(:,dummy.NotOutlier)));
Zoom_width(2) = mean(diff(dummy.inx(:,dummy.NotOutlier)));
Zoom_width(3) = std(diff(dummy.inx(:,dummy.NotOutlier)));

Zoom_Scale = sample_width./Zoom_width(1);  % This is the ratio of the pixel sizes in Full and zoomed in.

%% This is the number of zoomed in pixel in 1 mm
Zoom2mm = Pix2mm./Zoom_Scale; 
cd(StartingFolder)
end

function rawData = importfile(fileToRead)
%  Auto-generated by MATLAB on 15-Dec-2022 15:42:21

% Import the file
rawData = importdata(fileToRead);

% For some simple files (such as a CSV or JPEG files), IMPORTDATA might
% return a simple array.  If so, generate a structure so that the output
% matches that from the Import Wizard.
[~,name] = fileparts(fileToRead);
newData.(matlab.lang.makeValidName(name)) = rawData;

% Create new variables in the base workspace from those fields.
vars = fieldnames(newData);
for i = 1:length(vars)
    assignin('base', vars{i}, newData.(vars{i}));
end
end